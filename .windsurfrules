# Architecture
- Follow React Router best practices.
- This is a front-end, offline-first app, not a full-stack application.
- No server needed, no database needed, no auth.
- Use Electron for desktop app.
- This is also a Progressive Web App (PWA).
- For logic, always look for existing functions and classes in /src/lib/ before writing new ones.

# General Code Style & Formatting
- Use kebab-case for React component file names (e.g., user-card.tsx, not UserCard.tsx).
- Use PascalCase for component names in code (e.g., `UserCard`)
- Use camelCase for variables, functions, and props
- Prefer const assertions and explicit typing where beneficial
- Use meaningful variable names that describe color operations (e.g., `lockedColors`, `paletteHex`, `colorHarmony`)
- Avoid relative imports (e.g., ./utils) when possible, use path aliases instead.

# Styling & UI
- Use Tailwind CSS for styling.
- Use Shadcn UI for components.
- Implement smooth transitions for color changes using Tailwind transition classes
- Implement smooth color transitions and animations.
- Use Tailwind CSS for layout and spacing.
- Use icons from lucide-react for logos.

# Data Fetching & Forms
- Use TanStack Query (react-query) for data fetching if needed.
- Use React Hook Form for form handling.
- Use Zod for validation and schema definitions.

## Performance
- Debounce rapid palette generation requests
- Debounce input changes to prevent unnecessary re-renders
- Debounce search requests

# State Management & Logic
- Use Zustand for state management.
- Use React Context minimally.
- Use React Router for navigation.
- All data persistence should go through Dexie.js (only for palettes) or Zustand (for app state).

# Testing
- Use Vitest for unit testing.
- Test files colocated with components as FileName.test.ts.

# Color Theory
- Prioritize using our own methods, if no method exists, use chroma-js or culori for color-related operations.
